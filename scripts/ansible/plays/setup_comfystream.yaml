---
- name: Setup ComfyUI with Comfystream
  hosts: all
  become: yes
  vars:
    docker_image: "livepeer/comfystream:0.0.3"
    comfyui_username: "comfyadmin"

  tasks:
    # Retrieve ComfyUI server password
    - name: Set ComfyUI password (static if provided, random if empty)
      set_fact:
        comfyui_password: "{{ comfyui_password | default(lookup('password', '/dev/null length=32 chars=ascii_letters,digits')) }}"
    # Wait till VM is ready
    - name: Check if we can connect to the VM
      wait_for_connection:
        timeout: 300
        delay: 5
    - name: Ensure cloud-init has completed successfully
      command: cloud-init status --wait
      register: cloud_init_result
      retries: 30
      delay: 30
      changed_when: false
      failed_when: cloud_init_result.rc != 0
    - name: Wait for apt to be available
      shell: timeout 300 bash -c 'until apt-get update 2>/dev/null; do sleep 5; done'
      register: apt_result
      changed_when: apt_result.rc == 0
      failed_when: apt_result.rc != 0
    - name: Wait for apt to be available
      apt:
        update_cache: yes
      register: apt_result
      retries: 50
      delay: 10
      until: apt_result is success
    # Check if nvidia-smi is working and try to reboot if not
    - name: Check if nvidia-smi is working
      command: nvidia-smi
      register: nvidia_smi_result
      changed_when: false
      ignore_errors: yes
    - name: Reboot the machine if nvidia-smi fails
      reboot:
        msg: "Rebooting to initialize NVIDIA drivers"
        connect_timeout: 5
        reboot_timeout: 600
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: whoami
      when: nvidia_smi_result.rc != 0
    - name: Wait for the machine to come back online
      wait_for_connection:
        timeout: 300
        delay: 5
      when: nvidia_smi_result.rc != 0
    - name: Re-check if nvidia-smi is working after reboot
      command: nvidia-smi
      register: nvidia_smi_post_reboot_result
      retries: 6
      delay: 10
      until: nvidia_smi_post_reboot_result.rc == 0
      changed_when: false
      failed_when: nvidia_smi_post_reboot_result.rc != 0
      when: nvidia_smi_result.rc != 0
    # Setup auth proxy for ComfyUI (requires port 8189 to be open)
    - name: Install python3-passlib for ComfyUI password hashing
      apt:
        name: python3-passlib
        state: present
        update_cache: yes
      retries: 5
      delay: 30
    - name: Generate bcrypt hash on remote server
      shell: python3 -c "from passlib.hash import bcrypt; print(bcrypt.hash('{{ comfyui_password }}'))"
      register: remote_hash_result
      changed_when: false
      no_log: true
    - name: Set password hash from remote result
      set_fact:
        password_hash: "{{ remote_hash_result.stdout }}"
    - name: Display access credentials
      debug:
        msg:
          - "ComfyUI username: {{ comfyui_username }}"
          - "ComfyUI password: {{ comfyui_password }}"
    - name: Add Caddy GPG key
      apt_key:
        url: https://dl.cloudsmith.io/public/caddy/stable/gpg.key
        keyring: /usr/share/keyrings/caddy-stable-archive-keyring.gpg
        state: present
    - name: Download Caddy repository definition
      get_url:
        url: https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt
        dest: /etc/apt/sources.list.d/caddy-stable.list
        mode: "0644"
    - name: Install Caddy and OpenSSL
      apt:
        name:
          - caddy
          - openssl
        update_cache: yes
        state: present
    - name: Create certificates directory
      file:
        path: /etc/caddy/certificates
        state: directory
        mode: "0750"
        owner: caddy
        group: caddy
    - name: Generate self-signed SSL certificate
      command: >
        openssl req -x509 -newkey rsa:4096
        -keyout /etc/caddy/certificates/selfsigned.key
        -out /etc/caddy/certificates/selfsigned.crt
        -days 365 -nodes
        -subj "/C=US/ST=State/L=City/O=Company/OU=Org/CN=localhost"
      args:
        creates: /etc/caddy/certificates/selfsigned.crt
      notify: restart caddy
    - name: Set proper ownership for SSL certificates
      file:
        path: "{{ item }}"
        owner: caddy
        group: caddy
        mode: "0640"
      loop:
        - /etc/caddy/certificates/selfsigned.key
        - /etc/caddy/certificates/selfsigned.crt
      notify: restart caddy
    - name: Create Caddy configuration for ComfyUI server
      template:
        src: ../../templates/comfyui.caddy.j2
        dest: /etc/caddy/comfyui.caddy
        owner: caddy
        group: caddy
        mode: "0644"
      notify: restart caddy
    - name: Ensure Caddyfile includes ComfyUI server configuration
      lineinfile:
        path: /etc/caddy/Caddyfile
        line: "import /etc/caddy/comfyui.caddy"
        create: yes
      notify: restart caddy
    # Ensure NVIDIA Container Toolkit is installed and configured
    - name: Check if NVIDIA Container Toolkit is installed
      shell: dpkg -l | grep nvidia-container-toolkit
      register: nvidia_toolkit_installed
      ignore_errors: yes
      changed_when: false
    - name: Check if NVIDIA runtime is configured in Docker
      shell: docker info | grep -i nvidia
      register: nvidia_runtime_configured
      ignore_errors: yes
      changed_when: false
    - name: Add NVIDIA Container Toolkit repository key
      apt_key:
        url: https://nvidia.github.io/libnvidia-container/gpgkey
        keyring: /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg
        state: present
      when: nvidia_toolkit_installed.rc != 0
    - name: Add NVIDIA Container Toolkit repository
      get_url:
        url: https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list
        dest: /etc/apt/sources.list.d/nvidia-container-toolkit.list
        mode: "0644"
      when: nvidia_toolkit_installed.rc != 0
    - name: Ensure NVIDIA repository uses correct signing key
      replace:
        path: /etc/apt/sources.list.d/nvidia-container-toolkit.list
        regexp: "^deb https://"
        replace: "deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://"
      when: nvidia_toolkit_installed.rc != 0
    - name: Install NVIDIA Container Toolkit
      apt:
        name: nvidia-container-toolkit
        update_cache: yes
        state: present
      retries: 5
      delay: 30
      register: nvidia_toolkit_result
      until: nvidia_toolkit_result is success
      when: nvidia_toolkit_installed.rc != 0
    - name: Configure Docker to use NVIDIA runtime
      command: nvidia-ctk runtime configure --runtime=docker
      register: nvidia_ctk_result
      changed_when: nvidia_ctk_result.rc == 0
      when: nvidia_runtime_configured.rc != 0
    - name: Restart Docker service
      systemd:
        name: docker
        state: restarted
        enabled: yes
      when: nvidia_runtime_configured.rc != 0
    # Install, configure, and start ComfyUI with Comfystream
    - name: Install community.docker collection
      command: ansible-galaxy collection install community.docker
      delegate_to: localhost
      run_once: true
      become: no
    - name: Create directories for ComfyUI models and output
      file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ ansible_env.HOME }}/models/ComfyUI--models"
        - "{{ ansible_env.HOME }}/models/ComfyUI--output"
    - name: Check if Docker Hub credentials are provided
      set_fact:
        docker_login_required: "{{ docker_hub_username | default('') | length > 0 and docker_hub_password | default('') | length > 0 }}"
    - name: Log in to Docker Hub (if credentials exist)
      community.docker.docker_login:
        username: "{{ docker_hub_username }}"
        password: "{{ docker_hub_password }}"
      become: yes
      when: docker_login_required
      register: docker_login_result
      ignore_errors: yes
    - name: Pull Docker image for ComfyStream (may take a while)
      community.docker.docker_image:
        name: "{{ docker_image }}"
        source: pull
    - name: Log out from Docker Hub after pulling image
      community.docker.docker_login:
        state: absent
      become: yes
      when: docker_login_required and docker_login_result is succeeded
    - name: Run Comfystream Docker container
      community.docker.docker_container:
        name: comfystream
        image: "{{ docker_image }}"
        state: started
        restart_policy: unless-stopped
        stop_timeout: 300
        device_requests:
          - driver: nvidia
            count: -1 # Use all GPUs
            capabilities:
              - [gpu]
        volumes:
          - "{{ ansible_env.HOME }}/models/ComfyUI--models:/workspace/ComfyUI/models"
          - "{{ ansible_env.HOME }}/models/ComfyUI--output:/workspace/ComfyUI/output"
        ports:
          - "3000:3000"
          - "8188:8188"
          - "8889:8889"
        command: "--download-models --build-engines --server"
    - name: Display Ansible completion message
      debug:
        msg: "ComfyStream is starting up, downloading models, and building TensorRT enginesâ€”this may take a while. Access ComfyUI when ready at https://{{ ansible_default_ipv4.address }}:<COMFYUIPort>."

  handlers:
    - name: restart caddy
      systemd:
        name: caddy
        state: restarted
    - name: update apt cache
      apt:
        update_cache: yes
